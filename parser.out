Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> File
Rule 1     File -> Inic BlocoInst
Rule 2     Inic -> DeclVar Inic
Rule 3     Inic -> <empty>
Rule 4     DeclVar -> INT RestoDeclInt
Rule 5     DeclVar -> FLOAT RestoDeclFloat
Rule 6     RestoDeclInt -> ID OpcDeclInt
Rule 7     RestoDeclInt -> ID RE NUM RD RestoArrayInt
Rule 8     RestoArrayInt -> IGUAL OpcDeclInt
Rule 9     RestoArrayInt -> PV
Rule 10    OpcDeclInt -> IGUAL SegueIgual
Rule 11    OpcDeclInt -> PV
Rule 12    RestoDeclFloat -> ID OpcDeclFloat
Rule 13    RestoDeclFloat -> ID RE NUM RD RestoArrayFloat
Rule 14    RestoArrayFloat -> IGUAL OpcDeclFloat
Rule 15    RestoArrayFloat -> PV
Rule 16    OpcDeclFloat -> IGUAL SegueIgual
Rule 17    OpcDeclFloat -> PV
Rule 18    SegueIgual -> NUM PV
Rule 19    SegueIgual -> REAL PV
Rule 20    BlocoInst -> Inst BlocoInst
Rule 21    BlocoInst -> <empty>
Rule 22    Inst -> Atribuicao
Rule 23    Inst -> Printf
Rule 24    Inst -> Scanf
Rule 25    Inst -> If
Rule 26    Inst -> DoWhile
Rule 27    Atribuicao -> ID IGUAL RestoAtrib
Rule 28    Atribuicao -> ID RE NUM RD IGUAL RestoAtrib
Rule 29    Atribuicao -> ID RE ID RD IGUAL RestoAtrib
Rule 30    RestoAtrib -> Exp ADD Exp PV
Rule 31    RestoAtrib -> Exp SUB Exp PV
Rule 32    RestoAtrib -> Exp PV
Rule 33    Exp -> Exp2 MUL Exp2
Rule 34    Exp -> Exp2 DIV Exp2
Rule 35    Exp -> Exp2 MOD Exp2
Rule 36    Exp -> Exp2
Rule 37    Exp2 -> ID
Rule 38    Exp2 -> NUM
Rule 39    Exp2 -> REAL
Rule 40    Exp2 -> ID RE NUM RD
Rule 41    Exp2 -> ID RE ID RD
Rule 42    Printf -> PRINT PE TEXT RestoPrintf
Rule 43    RestoPrintf -> PD PV
Rule 44    RestoPrintf -> VIR ContPrintf
Rule 45    ContPrintf -> ID PD PV
Rule 46    ContPrintf -> ID RE NUM RD PD PV
Rule 47    ContPrintf -> ID RE ID RD PD PV
Rule 48    Scanf -> SCAN PE TEXT VIR RestoScanf
Rule 49    RestoScanf -> ENDID PD PV
Rule 50    RestoScanf -> ENDID RE NUM RD PD PV
Rule 51    RestoScanf -> ENDID RE ID RD PD PV
Rule 52    If -> IF Cond CE BlocoInstIf CD
Rule 53    Cond -> PE Conta ExpRel Conta PD
Rule 54    Cond -> Conta
Rule 55    ExpRel -> GT
Rule 56    ExpRel -> GE
Rule 57    ExpRel -> LT
Rule 58    ExpRel -> LE
Rule 59    ExpRel -> EQ
Rule 60    ExpRel -> DIF
Rule 61    Conta -> PE Conta2 PD
Rule 62    Conta -> Conta2
Rule 63    Conta2 -> Exp SUB Exp
Rule 64    Conta2 -> Exp ADD Exp
Rule 65    Conta2 -> Exp
Rule 66    BlocoInstIf -> InstBlocoIf BlocoInstIf
Rule 67    BlocoInstIf -> <empty>
Rule 68    InstBlocoIf -> Atribuicao
Rule 69    InstBlocoIf -> Printf
Rule 70    InstBlocoIf -> Scanf
Rule 71    InstBlocoIf -> If
Rule 72    DoWhile -> DO CE BlocoDoWhile CD WHILE CondDo PV
Rule 73    BlocoDoWhile -> InstBlocoDo BlocoDoWhile
Rule 74    BlocoDoWhile -> <empty>
Rule 75    InstBlocoDo -> Atribuicao
Rule 76    InstBlocoDo -> Printf
Rule 77    InstBlocoDo -> Scanf
Rule 78    InstBlocoDo -> If
Rule 79    CondDo -> PE Conta ExpRelDo Conta PD
Rule 80    CondDo -> Conta
Rule 81    ExpRelDo -> GT
Rule 82    ExpRelDo -> GE
Rule 83    ExpRelDo -> LT
Rule 84    ExpRelDo -> LE
Rule 85    ExpRelDo -> EQ
Rule 86    ExpRelDo -> DIF

Terminals, with rules where they appear

ADD                  : 30 64
CD                   : 52 72
CE                   : 52 72
DIF                  : 60 86
DIV                  : 34
DO                   : 72
ENDID                : 49 50 51
EQ                   : 59 85
FLOAT                : 5
GE                   : 56 82
GT                   : 55 81
ID                   : 6 7 12 13 27 28 29 29 37 40 41 41 45 46 47 47 51
IF                   : 52
IGUAL                : 8 10 14 16 27 28 29
INT                  : 4
LE                   : 58 84
LT                   : 57 83
MOD                  : 35
MUL                  : 33
NUM                  : 7 13 18 28 38 40 46 50
PD                   : 43 45 46 47 49 50 51 53 61 79
PE                   : 42 48 53 61 79
PRINT                : 42
PV                   : 9 11 15 17 18 19 30 31 32 43 45 46 47 49 50 51 72
RD                   : 7 13 28 29 40 41 46 47 50 51
RE                   : 7 13 28 29 40 41 46 47 50 51
REAL                 : 19 39
SCAN                 : 48
SUB                  : 31 63
TEXT                 : 42 48
VIR                  : 44 48
WHILE                : 72
error                : 

Nonterminals, with rules where they appear

Atribuicao           : 22 68 75
BlocoDoWhile         : 72 73
BlocoInst            : 1 20
BlocoInstIf          : 52 66
Cond                 : 52
CondDo               : 72
ContPrintf           : 44
Conta                : 53 53 54 79 79 80
Conta2               : 61 62
DeclVar              : 2
DoWhile              : 26
Exp                  : 30 30 31 31 32 63 63 64 64 65
Exp2                 : 33 33 34 34 35 35 36
ExpRel               : 53
ExpRelDo             : 79
File                 : 0
If                   : 25 71 78
Inic                 : 1 2
Inst                 : 20
InstBlocoDo          : 73
InstBlocoIf          : 66
OpcDeclFloat         : 12 14
OpcDeclInt           : 6 8
Printf               : 23 69 76
RestoArrayFloat      : 13
RestoArrayInt        : 7
RestoAtrib           : 27 28 29
RestoDeclFloat       : 5
RestoDeclInt         : 4
RestoPrintf          : 42
RestoScanf           : 48
Scanf                : 24 70 77
SegueIgual           : 10 16

Parsing method: LALR

state 0

    (0) S' -> . File
    (1) File -> . Inic BlocoInst
    (2) Inic -> . DeclVar Inic
    (3) Inic -> .
    (4) DeclVar -> . INT RestoDeclInt
    (5) DeclVar -> . FLOAT RestoDeclFloat

    ID              reduce using rule 3 (Inic -> .)
    PRINT           reduce using rule 3 (Inic -> .)
    SCAN            reduce using rule 3 (Inic -> .)
    IF              reduce using rule 3 (Inic -> .)
    DO              reduce using rule 3 (Inic -> .)
    $end            reduce using rule 3 (Inic -> .)
    INT             shift and go to state 4
    FLOAT           shift and go to state 5

    File                           shift and go to state 1
    Inic                           shift and go to state 2
    DeclVar                        shift and go to state 3

state 1

    (0) S' -> File .



state 2

    (1) File -> Inic . BlocoInst
    (20) BlocoInst -> . Inst BlocoInst
    (21) BlocoInst -> .
    (22) Inst -> . Atribuicao
    (23) Inst -> . Printf
    (24) Inst -> . Scanf
    (25) Inst -> . If
    (26) Inst -> . DoWhile
    (27) Atribuicao -> . ID IGUAL RestoAtrib
    (28) Atribuicao -> . ID RE NUM RD IGUAL RestoAtrib
    (29) Atribuicao -> . ID RE ID RD IGUAL RestoAtrib
    (42) Printf -> . PRINT PE TEXT RestoPrintf
    (48) Scanf -> . SCAN PE TEXT VIR RestoScanf
    (52) If -> . IF Cond CE BlocoInstIf CD
    (72) DoWhile -> . DO CE BlocoDoWhile CD WHILE CondDo PV

    $end            reduce using rule 21 (BlocoInst -> .)
    ID              shift and go to state 13
    PRINT           shift and go to state 14
    SCAN            shift and go to state 15
    IF              shift and go to state 16
    DO              shift and go to state 17

    BlocoInst                      shift and go to state 6
    Inst                           shift and go to state 7
    Atribuicao                     shift and go to state 8
    Printf                         shift and go to state 9
    Scanf                          shift and go to state 10
    If                             shift and go to state 11
    DoWhile                        shift and go to state 12

state 3

    (2) Inic -> DeclVar . Inic
    (2) Inic -> . DeclVar Inic
    (3) Inic -> .
    (4) DeclVar -> . INT RestoDeclInt
    (5) DeclVar -> . FLOAT RestoDeclFloat

    ID              reduce using rule 3 (Inic -> .)
    PRINT           reduce using rule 3 (Inic -> .)
    SCAN            reduce using rule 3 (Inic -> .)
    IF              reduce using rule 3 (Inic -> .)
    DO              reduce using rule 3 (Inic -> .)
    $end            reduce using rule 3 (Inic -> .)
    INT             shift and go to state 4
    FLOAT           shift and go to state 5

    DeclVar                        shift and go to state 3
    Inic                           shift and go to state 18

state 4

    (4) DeclVar -> INT . RestoDeclInt
    (6) RestoDeclInt -> . ID OpcDeclInt
    (7) RestoDeclInt -> . ID RE NUM RD RestoArrayInt

    ID              shift and go to state 20

    RestoDeclInt                   shift and go to state 19

state 5

    (5) DeclVar -> FLOAT . RestoDeclFloat
    (12) RestoDeclFloat -> . ID OpcDeclFloat
    (13) RestoDeclFloat -> . ID RE NUM RD RestoArrayFloat

    ID              shift and go to state 22

    RestoDeclFloat                 shift and go to state 21

state 6

    (1) File -> Inic BlocoInst .

    $end            reduce using rule 1 (File -> Inic BlocoInst .)


state 7

    (20) BlocoInst -> Inst . BlocoInst
    (20) BlocoInst -> . Inst BlocoInst
    (21) BlocoInst -> .
    (22) Inst -> . Atribuicao
    (23) Inst -> . Printf
    (24) Inst -> . Scanf
    (25) Inst -> . If
    (26) Inst -> . DoWhile
    (27) Atribuicao -> . ID IGUAL RestoAtrib
    (28) Atribuicao -> . ID RE NUM RD IGUAL RestoAtrib
    (29) Atribuicao -> . ID RE ID RD IGUAL RestoAtrib
    (42) Printf -> . PRINT PE TEXT RestoPrintf
    (48) Scanf -> . SCAN PE TEXT VIR RestoScanf
    (52) If -> . IF Cond CE BlocoInstIf CD
    (72) DoWhile -> . DO CE BlocoDoWhile CD WHILE CondDo PV

    $end            reduce using rule 21 (BlocoInst -> .)
    ID              shift and go to state 13
    PRINT           shift and go to state 14
    SCAN            shift and go to state 15
    IF              shift and go to state 16
    DO              shift and go to state 17

    Inst                           shift and go to state 7
    BlocoInst                      shift and go to state 23
    Atribuicao                     shift and go to state 8
    Printf                         shift and go to state 9
    Scanf                          shift and go to state 10
    If                             shift and go to state 11
    DoWhile                        shift and go to state 12

state 8

    (22) Inst -> Atribuicao .

    ID              reduce using rule 22 (Inst -> Atribuicao .)
    PRINT           reduce using rule 22 (Inst -> Atribuicao .)
    SCAN            reduce using rule 22 (Inst -> Atribuicao .)
    IF              reduce using rule 22 (Inst -> Atribuicao .)
    DO              reduce using rule 22 (Inst -> Atribuicao .)
    $end            reduce using rule 22 (Inst -> Atribuicao .)


state 9

    (23) Inst -> Printf .

    ID              reduce using rule 23 (Inst -> Printf .)
    PRINT           reduce using rule 23 (Inst -> Printf .)
    SCAN            reduce using rule 23 (Inst -> Printf .)
    IF              reduce using rule 23 (Inst -> Printf .)
    DO              reduce using rule 23 (Inst -> Printf .)
    $end            reduce using rule 23 (Inst -> Printf .)


state 10

    (24) Inst -> Scanf .

    ID              reduce using rule 24 (Inst -> Scanf .)
    PRINT           reduce using rule 24 (Inst -> Scanf .)
    SCAN            reduce using rule 24 (Inst -> Scanf .)
    IF              reduce using rule 24 (Inst -> Scanf .)
    DO              reduce using rule 24 (Inst -> Scanf .)
    $end            reduce using rule 24 (Inst -> Scanf .)


state 11

    (25) Inst -> If .

    ID              reduce using rule 25 (Inst -> If .)
    PRINT           reduce using rule 25 (Inst -> If .)
    SCAN            reduce using rule 25 (Inst -> If .)
    IF              reduce using rule 25 (Inst -> If .)
    DO              reduce using rule 25 (Inst -> If .)
    $end            reduce using rule 25 (Inst -> If .)


state 12

    (26) Inst -> DoWhile .

    ID              reduce using rule 26 (Inst -> DoWhile .)
    PRINT           reduce using rule 26 (Inst -> DoWhile .)
    SCAN            reduce using rule 26 (Inst -> DoWhile .)
    IF              reduce using rule 26 (Inst -> DoWhile .)
    DO              reduce using rule 26 (Inst -> DoWhile .)
    $end            reduce using rule 26 (Inst -> DoWhile .)


state 13

    (27) Atribuicao -> ID . IGUAL RestoAtrib
    (28) Atribuicao -> ID . RE NUM RD IGUAL RestoAtrib
    (29) Atribuicao -> ID . RE ID RD IGUAL RestoAtrib

    IGUAL           shift and go to state 24
    RE              shift and go to state 25


state 14

    (42) Printf -> PRINT . PE TEXT RestoPrintf

    PE              shift and go to state 26


state 15

    (48) Scanf -> SCAN . PE TEXT VIR RestoScanf

    PE              shift and go to state 27


state 16

    (52) If -> IF . Cond CE BlocoInstIf CD
    (53) Cond -> . PE Conta ExpRel Conta PD
    (54) Cond -> . Conta
    (61) Conta -> . PE Conta2 PD
    (62) Conta -> . Conta2
    (63) Conta2 -> . Exp SUB Exp
    (64) Conta2 -> . Exp ADD Exp
    (65) Conta2 -> . Exp
    (33) Exp -> . Exp2 MUL Exp2
    (34) Exp -> . Exp2 DIV Exp2
    (35) Exp -> . Exp2 MOD Exp2
    (36) Exp -> . Exp2
    (37) Exp2 -> . ID
    (38) Exp2 -> . NUM
    (39) Exp2 -> . REAL
    (40) Exp2 -> . ID RE NUM RD
    (41) Exp2 -> . ID RE ID RD

    PE              shift and go to state 29
    ID              shift and go to state 34
    NUM             shift and go to state 35
    REAL            shift and go to state 36

    Cond                           shift and go to state 28
    Conta                          shift and go to state 30
    Conta2                         shift and go to state 31
    Exp                            shift and go to state 32
    Exp2                           shift and go to state 33

state 17

    (72) DoWhile -> DO . CE BlocoDoWhile CD WHILE CondDo PV

    CE              shift and go to state 37


state 18

    (2) Inic -> DeclVar Inic .

    ID              reduce using rule 2 (Inic -> DeclVar Inic .)
    PRINT           reduce using rule 2 (Inic -> DeclVar Inic .)
    SCAN            reduce using rule 2 (Inic -> DeclVar Inic .)
    IF              reduce using rule 2 (Inic -> DeclVar Inic .)
    DO              reduce using rule 2 (Inic -> DeclVar Inic .)
    $end            reduce using rule 2 (Inic -> DeclVar Inic .)


state 19

    (4) DeclVar -> INT RestoDeclInt .

    INT             reduce using rule 4 (DeclVar -> INT RestoDeclInt .)
    FLOAT           reduce using rule 4 (DeclVar -> INT RestoDeclInt .)
    ID              reduce using rule 4 (DeclVar -> INT RestoDeclInt .)
    PRINT           reduce using rule 4 (DeclVar -> INT RestoDeclInt .)
    SCAN            reduce using rule 4 (DeclVar -> INT RestoDeclInt .)
    IF              reduce using rule 4 (DeclVar -> INT RestoDeclInt .)
    DO              reduce using rule 4 (DeclVar -> INT RestoDeclInt .)
    $end            reduce using rule 4 (DeclVar -> INT RestoDeclInt .)


state 20

    (6) RestoDeclInt -> ID . OpcDeclInt
    (7) RestoDeclInt -> ID . RE NUM RD RestoArrayInt
    (10) OpcDeclInt -> . IGUAL SegueIgual
    (11) OpcDeclInt -> . PV

    RE              shift and go to state 39
    IGUAL           shift and go to state 40
    PV              shift and go to state 41

    OpcDeclInt                     shift and go to state 38

state 21

    (5) DeclVar -> FLOAT RestoDeclFloat .

    INT             reduce using rule 5 (DeclVar -> FLOAT RestoDeclFloat .)
    FLOAT           reduce using rule 5 (DeclVar -> FLOAT RestoDeclFloat .)
    ID              reduce using rule 5 (DeclVar -> FLOAT RestoDeclFloat .)
    PRINT           reduce using rule 5 (DeclVar -> FLOAT RestoDeclFloat .)
    SCAN            reduce using rule 5 (DeclVar -> FLOAT RestoDeclFloat .)
    IF              reduce using rule 5 (DeclVar -> FLOAT RestoDeclFloat .)
    DO              reduce using rule 5 (DeclVar -> FLOAT RestoDeclFloat .)
    $end            reduce using rule 5 (DeclVar -> FLOAT RestoDeclFloat .)


state 22

    (12) RestoDeclFloat -> ID . OpcDeclFloat
    (13) RestoDeclFloat -> ID . RE NUM RD RestoArrayFloat
    (16) OpcDeclFloat -> . IGUAL SegueIgual
    (17) OpcDeclFloat -> . PV

    RE              shift and go to state 43
    IGUAL           shift and go to state 44
    PV              shift and go to state 45

    OpcDeclFloat                   shift and go to state 42

state 23

    (20) BlocoInst -> Inst BlocoInst .

    $end            reduce using rule 20 (BlocoInst -> Inst BlocoInst .)


state 24

    (27) Atribuicao -> ID IGUAL . RestoAtrib
    (30) RestoAtrib -> . Exp ADD Exp PV
    (31) RestoAtrib -> . Exp SUB Exp PV
    (32) RestoAtrib -> . Exp PV
    (33) Exp -> . Exp2 MUL Exp2
    (34) Exp -> . Exp2 DIV Exp2
    (35) Exp -> . Exp2 MOD Exp2
    (36) Exp -> . Exp2
    (37) Exp2 -> . ID
    (38) Exp2 -> . NUM
    (39) Exp2 -> . REAL
    (40) Exp2 -> . ID RE NUM RD
    (41) Exp2 -> . ID RE ID RD

    ID              shift and go to state 34
    NUM             shift and go to state 35
    REAL            shift and go to state 36

    RestoAtrib                     shift and go to state 46
    Exp                            shift and go to state 47
    Exp2                           shift and go to state 33

state 25

    (28) Atribuicao -> ID RE . NUM RD IGUAL RestoAtrib
    (29) Atribuicao -> ID RE . ID RD IGUAL RestoAtrib

    NUM             shift and go to state 49
    ID              shift and go to state 48


state 26

    (42) Printf -> PRINT PE . TEXT RestoPrintf

    TEXT            shift and go to state 50


state 27

    (48) Scanf -> SCAN PE . TEXT VIR RestoScanf

    TEXT            shift and go to state 51


state 28

    (52) If -> IF Cond . CE BlocoInstIf CD

    CE              shift and go to state 52


state 29

    (53) Cond -> PE . Conta ExpRel Conta PD
    (61) Conta -> PE . Conta2 PD
    (61) Conta -> . PE Conta2 PD
    (62) Conta -> . Conta2
    (63) Conta2 -> . Exp SUB Exp
    (64) Conta2 -> . Exp ADD Exp
    (65) Conta2 -> . Exp
    (33) Exp -> . Exp2 MUL Exp2
    (34) Exp -> . Exp2 DIV Exp2
    (35) Exp -> . Exp2 MOD Exp2
    (36) Exp -> . Exp2
    (37) Exp2 -> . ID
    (38) Exp2 -> . NUM
    (39) Exp2 -> . REAL
    (40) Exp2 -> . ID RE NUM RD
    (41) Exp2 -> . ID RE ID RD

    PE              shift and go to state 53
    ID              shift and go to state 34
    NUM             shift and go to state 35
    REAL            shift and go to state 36

    Conta                          shift and go to state 54
    Conta2                         shift and go to state 55
    Exp                            shift and go to state 32
    Exp2                           shift and go to state 33

state 30

    (54) Cond -> Conta .

    CE              reduce using rule 54 (Cond -> Conta .)


state 31

    (62) Conta -> Conta2 .

    CE              reduce using rule 62 (Conta -> Conta2 .)
    PD              reduce using rule 62 (Conta -> Conta2 .)
    PV              reduce using rule 62 (Conta -> Conta2 .)


state 32

    (63) Conta2 -> Exp . SUB Exp
    (64) Conta2 -> Exp . ADD Exp
    (65) Conta2 -> Exp .

    SUB             shift and go to state 56
    ADD             shift and go to state 57
    CE              reduce using rule 65 (Conta2 -> Exp .)
    PD              reduce using rule 65 (Conta2 -> Exp .)
    GT              reduce using rule 65 (Conta2 -> Exp .)
    GE              reduce using rule 65 (Conta2 -> Exp .)
    LT              reduce using rule 65 (Conta2 -> Exp .)
    LE              reduce using rule 65 (Conta2 -> Exp .)
    EQ              reduce using rule 65 (Conta2 -> Exp .)
    DIF             reduce using rule 65 (Conta2 -> Exp .)
    PV              reduce using rule 65 (Conta2 -> Exp .)


state 33

    (33) Exp -> Exp2 . MUL Exp2
    (34) Exp -> Exp2 . DIV Exp2
    (35) Exp -> Exp2 . MOD Exp2
    (36) Exp -> Exp2 .

    MUL             shift and go to state 58
    DIV             shift and go to state 59
    MOD             shift and go to state 60
    SUB             reduce using rule 36 (Exp -> Exp2 .)
    ADD             reduce using rule 36 (Exp -> Exp2 .)
    CE              reduce using rule 36 (Exp -> Exp2 .)
    PV              reduce using rule 36 (Exp -> Exp2 .)
    PD              reduce using rule 36 (Exp -> Exp2 .)
    GT              reduce using rule 36 (Exp -> Exp2 .)
    GE              reduce using rule 36 (Exp -> Exp2 .)
    LT              reduce using rule 36 (Exp -> Exp2 .)
    LE              reduce using rule 36 (Exp -> Exp2 .)
    EQ              reduce using rule 36 (Exp -> Exp2 .)
    DIF             reduce using rule 36 (Exp -> Exp2 .)


state 34

    (37) Exp2 -> ID .
    (40) Exp2 -> ID . RE NUM RD
    (41) Exp2 -> ID . RE ID RD

    MUL             reduce using rule 37 (Exp2 -> ID .)
    DIV             reduce using rule 37 (Exp2 -> ID .)
    MOD             reduce using rule 37 (Exp2 -> ID .)
    SUB             reduce using rule 37 (Exp2 -> ID .)
    ADD             reduce using rule 37 (Exp2 -> ID .)
    CE              reduce using rule 37 (Exp2 -> ID .)
    PV              reduce using rule 37 (Exp2 -> ID .)
    PD              reduce using rule 37 (Exp2 -> ID .)
    GT              reduce using rule 37 (Exp2 -> ID .)
    GE              reduce using rule 37 (Exp2 -> ID .)
    LT              reduce using rule 37 (Exp2 -> ID .)
    LE              reduce using rule 37 (Exp2 -> ID .)
    EQ              reduce using rule 37 (Exp2 -> ID .)
    DIF             reduce using rule 37 (Exp2 -> ID .)
    RE              shift and go to state 61


state 35

    (38) Exp2 -> NUM .

    MUL             reduce using rule 38 (Exp2 -> NUM .)
    DIV             reduce using rule 38 (Exp2 -> NUM .)
    MOD             reduce using rule 38 (Exp2 -> NUM .)
    SUB             reduce using rule 38 (Exp2 -> NUM .)
    ADD             reduce using rule 38 (Exp2 -> NUM .)
    CE              reduce using rule 38 (Exp2 -> NUM .)
    PV              reduce using rule 38 (Exp2 -> NUM .)
    PD              reduce using rule 38 (Exp2 -> NUM .)
    GT              reduce using rule 38 (Exp2 -> NUM .)
    GE              reduce using rule 38 (Exp2 -> NUM .)
    LT              reduce using rule 38 (Exp2 -> NUM .)
    LE              reduce using rule 38 (Exp2 -> NUM .)
    EQ              reduce using rule 38 (Exp2 -> NUM .)
    DIF             reduce using rule 38 (Exp2 -> NUM .)


state 36

    (39) Exp2 -> REAL .

    MUL             reduce using rule 39 (Exp2 -> REAL .)
    DIV             reduce using rule 39 (Exp2 -> REAL .)
    MOD             reduce using rule 39 (Exp2 -> REAL .)
    SUB             reduce using rule 39 (Exp2 -> REAL .)
    ADD             reduce using rule 39 (Exp2 -> REAL .)
    CE              reduce using rule 39 (Exp2 -> REAL .)
    PV              reduce using rule 39 (Exp2 -> REAL .)
    PD              reduce using rule 39 (Exp2 -> REAL .)
    GT              reduce using rule 39 (Exp2 -> REAL .)
    GE              reduce using rule 39 (Exp2 -> REAL .)
    LT              reduce using rule 39 (Exp2 -> REAL .)
    LE              reduce using rule 39 (Exp2 -> REAL .)
    EQ              reduce using rule 39 (Exp2 -> REAL .)
    DIF             reduce using rule 39 (Exp2 -> REAL .)


state 37

    (72) DoWhile -> DO CE . BlocoDoWhile CD WHILE CondDo PV
    (73) BlocoDoWhile -> . InstBlocoDo BlocoDoWhile
    (74) BlocoDoWhile -> .
    (75) InstBlocoDo -> . Atribuicao
    (76) InstBlocoDo -> . Printf
    (77) InstBlocoDo -> . Scanf
    (78) InstBlocoDo -> . If
    (27) Atribuicao -> . ID IGUAL RestoAtrib
    (28) Atribuicao -> . ID RE NUM RD IGUAL RestoAtrib
    (29) Atribuicao -> . ID RE ID RD IGUAL RestoAtrib
    (42) Printf -> . PRINT PE TEXT RestoPrintf
    (48) Scanf -> . SCAN PE TEXT VIR RestoScanf
    (52) If -> . IF Cond CE BlocoInstIf CD

    CD              reduce using rule 74 (BlocoDoWhile -> .)
    ID              shift and go to state 13
    PRINT           shift and go to state 14
    SCAN            shift and go to state 15
    IF              shift and go to state 16

    BlocoDoWhile                   shift and go to state 62
    InstBlocoDo                    shift and go to state 63
    Atribuicao                     shift and go to state 64
    Printf                         shift and go to state 65
    Scanf                          shift and go to state 66
    If                             shift and go to state 67

state 38

    (6) RestoDeclInt -> ID OpcDeclInt .

    INT             reduce using rule 6 (RestoDeclInt -> ID OpcDeclInt .)
    FLOAT           reduce using rule 6 (RestoDeclInt -> ID OpcDeclInt .)
    ID              reduce using rule 6 (RestoDeclInt -> ID OpcDeclInt .)
    PRINT           reduce using rule 6 (RestoDeclInt -> ID OpcDeclInt .)
    SCAN            reduce using rule 6 (RestoDeclInt -> ID OpcDeclInt .)
    IF              reduce using rule 6 (RestoDeclInt -> ID OpcDeclInt .)
    DO              reduce using rule 6 (RestoDeclInt -> ID OpcDeclInt .)
    $end            reduce using rule 6 (RestoDeclInt -> ID OpcDeclInt .)


state 39

    (7) RestoDeclInt -> ID RE . NUM RD RestoArrayInt

    NUM             shift and go to state 68


state 40

    (10) OpcDeclInt -> IGUAL . SegueIgual
    (18) SegueIgual -> . NUM PV
    (19) SegueIgual -> . REAL PV

    NUM             shift and go to state 70
    REAL            shift and go to state 71

    SegueIgual                     shift and go to state 69

state 41

    (11) OpcDeclInt -> PV .

    INT             reduce using rule 11 (OpcDeclInt -> PV .)
    FLOAT           reduce using rule 11 (OpcDeclInt -> PV .)
    ID              reduce using rule 11 (OpcDeclInt -> PV .)
    PRINT           reduce using rule 11 (OpcDeclInt -> PV .)
    SCAN            reduce using rule 11 (OpcDeclInt -> PV .)
    IF              reduce using rule 11 (OpcDeclInt -> PV .)
    DO              reduce using rule 11 (OpcDeclInt -> PV .)
    $end            reduce using rule 11 (OpcDeclInt -> PV .)


state 42

    (12) RestoDeclFloat -> ID OpcDeclFloat .

    INT             reduce using rule 12 (RestoDeclFloat -> ID OpcDeclFloat .)
    FLOAT           reduce using rule 12 (RestoDeclFloat -> ID OpcDeclFloat .)
    ID              reduce using rule 12 (RestoDeclFloat -> ID OpcDeclFloat .)
    PRINT           reduce using rule 12 (RestoDeclFloat -> ID OpcDeclFloat .)
    SCAN            reduce using rule 12 (RestoDeclFloat -> ID OpcDeclFloat .)
    IF              reduce using rule 12 (RestoDeclFloat -> ID OpcDeclFloat .)
    DO              reduce using rule 12 (RestoDeclFloat -> ID OpcDeclFloat .)
    $end            reduce using rule 12 (RestoDeclFloat -> ID OpcDeclFloat .)


state 43

    (13) RestoDeclFloat -> ID RE . NUM RD RestoArrayFloat

    NUM             shift and go to state 72


state 44

    (16) OpcDeclFloat -> IGUAL . SegueIgual
    (18) SegueIgual -> . NUM PV
    (19) SegueIgual -> . REAL PV

    NUM             shift and go to state 70
    REAL            shift and go to state 71

    SegueIgual                     shift and go to state 73

state 45

    (17) OpcDeclFloat -> PV .

    INT             reduce using rule 17 (OpcDeclFloat -> PV .)
    FLOAT           reduce using rule 17 (OpcDeclFloat -> PV .)
    ID              reduce using rule 17 (OpcDeclFloat -> PV .)
    PRINT           reduce using rule 17 (OpcDeclFloat -> PV .)
    SCAN            reduce using rule 17 (OpcDeclFloat -> PV .)
    IF              reduce using rule 17 (OpcDeclFloat -> PV .)
    DO              reduce using rule 17 (OpcDeclFloat -> PV .)
    $end            reduce using rule 17 (OpcDeclFloat -> PV .)


state 46

    (27) Atribuicao -> ID IGUAL RestoAtrib .

    ID              reduce using rule 27 (Atribuicao -> ID IGUAL RestoAtrib .)
    PRINT           reduce using rule 27 (Atribuicao -> ID IGUAL RestoAtrib .)
    SCAN            reduce using rule 27 (Atribuicao -> ID IGUAL RestoAtrib .)
    IF              reduce using rule 27 (Atribuicao -> ID IGUAL RestoAtrib .)
    DO              reduce using rule 27 (Atribuicao -> ID IGUAL RestoAtrib .)
    $end            reduce using rule 27 (Atribuicao -> ID IGUAL RestoAtrib .)
    CD              reduce using rule 27 (Atribuicao -> ID IGUAL RestoAtrib .)


state 47

    (30) RestoAtrib -> Exp . ADD Exp PV
    (31) RestoAtrib -> Exp . SUB Exp PV
    (32) RestoAtrib -> Exp . PV

    ADD             shift and go to state 74
    SUB             shift and go to state 76
    PV              shift and go to state 75


state 48

    (29) Atribuicao -> ID RE ID . RD IGUAL RestoAtrib

    RD              shift and go to state 77


state 49

    (28) Atribuicao -> ID RE NUM . RD IGUAL RestoAtrib

    RD              shift and go to state 78


state 50

    (42) Printf -> PRINT PE TEXT . RestoPrintf
    (43) RestoPrintf -> . PD PV
    (44) RestoPrintf -> . VIR ContPrintf

    PD              shift and go to state 80
    VIR             shift and go to state 81

    RestoPrintf                    shift and go to state 79

state 51

    (48) Scanf -> SCAN PE TEXT . VIR RestoScanf

    VIR             shift and go to state 82


state 52

    (52) If -> IF Cond CE . BlocoInstIf CD
    (66) BlocoInstIf -> . InstBlocoIf BlocoInstIf
    (67) BlocoInstIf -> .
    (68) InstBlocoIf -> . Atribuicao
    (69) InstBlocoIf -> . Printf
    (70) InstBlocoIf -> . Scanf
    (71) InstBlocoIf -> . If
    (27) Atribuicao -> . ID IGUAL RestoAtrib
    (28) Atribuicao -> . ID RE NUM RD IGUAL RestoAtrib
    (29) Atribuicao -> . ID RE ID RD IGUAL RestoAtrib
    (42) Printf -> . PRINT PE TEXT RestoPrintf
    (48) Scanf -> . SCAN PE TEXT VIR RestoScanf
    (52) If -> . IF Cond CE BlocoInstIf CD

    CD              reduce using rule 67 (BlocoInstIf -> .)
    ID              shift and go to state 13
    PRINT           shift and go to state 14
    SCAN            shift and go to state 15
    IF              shift and go to state 16

    BlocoInstIf                    shift and go to state 83
    InstBlocoIf                    shift and go to state 84
    Atribuicao                     shift and go to state 85
    Printf                         shift and go to state 86
    Scanf                          shift and go to state 87
    If                             shift and go to state 88

state 53

    (61) Conta -> PE . Conta2 PD
    (63) Conta2 -> . Exp SUB Exp
    (64) Conta2 -> . Exp ADD Exp
    (65) Conta2 -> . Exp
    (33) Exp -> . Exp2 MUL Exp2
    (34) Exp -> . Exp2 DIV Exp2
    (35) Exp -> . Exp2 MOD Exp2
    (36) Exp -> . Exp2
    (37) Exp2 -> . ID
    (38) Exp2 -> . NUM
    (39) Exp2 -> . REAL
    (40) Exp2 -> . ID RE NUM RD
    (41) Exp2 -> . ID RE ID RD

    ID              shift and go to state 34
    NUM             shift and go to state 35
    REAL            shift and go to state 36

    Conta2                         shift and go to state 89
    Exp                            shift and go to state 32
    Exp2                           shift and go to state 33

state 54

    (53) Cond -> PE Conta . ExpRel Conta PD
    (55) ExpRel -> . GT
    (56) ExpRel -> . GE
    (57) ExpRel -> . LT
    (58) ExpRel -> . LE
    (59) ExpRel -> . EQ
    (60) ExpRel -> . DIF

    GT              shift and go to state 91
    GE              shift and go to state 92
    LT              shift and go to state 93
    LE              shift and go to state 94
    EQ              shift and go to state 95
    DIF             shift and go to state 96

    ExpRel                         shift and go to state 90

state 55

    (61) Conta -> PE Conta2 . PD
    (62) Conta -> Conta2 .

    PD              shift and go to state 97
    GT              reduce using rule 62 (Conta -> Conta2 .)
    GE              reduce using rule 62 (Conta -> Conta2 .)
    LT              reduce using rule 62 (Conta -> Conta2 .)
    LE              reduce using rule 62 (Conta -> Conta2 .)
    EQ              reduce using rule 62 (Conta -> Conta2 .)
    DIF             reduce using rule 62 (Conta -> Conta2 .)


state 56

    (63) Conta2 -> Exp SUB . Exp
    (33) Exp -> . Exp2 MUL Exp2
    (34) Exp -> . Exp2 DIV Exp2
    (35) Exp -> . Exp2 MOD Exp2
    (36) Exp -> . Exp2
    (37) Exp2 -> . ID
    (38) Exp2 -> . NUM
    (39) Exp2 -> . REAL
    (40) Exp2 -> . ID RE NUM RD
    (41) Exp2 -> . ID RE ID RD

    ID              shift and go to state 34
    NUM             shift and go to state 35
    REAL            shift and go to state 36

    Exp                            shift and go to state 98
    Exp2                           shift and go to state 33

state 57

    (64) Conta2 -> Exp ADD . Exp
    (33) Exp -> . Exp2 MUL Exp2
    (34) Exp -> . Exp2 DIV Exp2
    (35) Exp -> . Exp2 MOD Exp2
    (36) Exp -> . Exp2
    (37) Exp2 -> . ID
    (38) Exp2 -> . NUM
    (39) Exp2 -> . REAL
    (40) Exp2 -> . ID RE NUM RD
    (41) Exp2 -> . ID RE ID RD

    ID              shift and go to state 34
    NUM             shift and go to state 35
    REAL            shift and go to state 36

    Exp                            shift and go to state 99
    Exp2                           shift and go to state 33

state 58

    (33) Exp -> Exp2 MUL . Exp2
    (37) Exp2 -> . ID
    (38) Exp2 -> . NUM
    (39) Exp2 -> . REAL
    (40) Exp2 -> . ID RE NUM RD
    (41) Exp2 -> . ID RE ID RD

    ID              shift and go to state 34
    NUM             shift and go to state 35
    REAL            shift and go to state 36

    Exp2                           shift and go to state 100

state 59

    (34) Exp -> Exp2 DIV . Exp2
    (37) Exp2 -> . ID
    (38) Exp2 -> . NUM
    (39) Exp2 -> . REAL
    (40) Exp2 -> . ID RE NUM RD
    (41) Exp2 -> . ID RE ID RD

    ID              shift and go to state 34
    NUM             shift and go to state 35
    REAL            shift and go to state 36

    Exp2                           shift and go to state 101

state 60

    (35) Exp -> Exp2 MOD . Exp2
    (37) Exp2 -> . ID
    (38) Exp2 -> . NUM
    (39) Exp2 -> . REAL
    (40) Exp2 -> . ID RE NUM RD
    (41) Exp2 -> . ID RE ID RD

    ID              shift and go to state 34
    NUM             shift and go to state 35
    REAL            shift and go to state 36

    Exp2                           shift and go to state 102

state 61

    (40) Exp2 -> ID RE . NUM RD
    (41) Exp2 -> ID RE . ID RD

    NUM             shift and go to state 104
    ID              shift and go to state 103


state 62

    (72) DoWhile -> DO CE BlocoDoWhile . CD WHILE CondDo PV

    CD              shift and go to state 105


state 63

    (73) BlocoDoWhile -> InstBlocoDo . BlocoDoWhile
    (73) BlocoDoWhile -> . InstBlocoDo BlocoDoWhile
    (74) BlocoDoWhile -> .
    (75) InstBlocoDo -> . Atribuicao
    (76) InstBlocoDo -> . Printf
    (77) InstBlocoDo -> . Scanf
    (78) InstBlocoDo -> . If
    (27) Atribuicao -> . ID IGUAL RestoAtrib
    (28) Atribuicao -> . ID RE NUM RD IGUAL RestoAtrib
    (29) Atribuicao -> . ID RE ID RD IGUAL RestoAtrib
    (42) Printf -> . PRINT PE TEXT RestoPrintf
    (48) Scanf -> . SCAN PE TEXT VIR RestoScanf
    (52) If -> . IF Cond CE BlocoInstIf CD

    CD              reduce using rule 74 (BlocoDoWhile -> .)
    ID              shift and go to state 13
    PRINT           shift and go to state 14
    SCAN            shift and go to state 15
    IF              shift and go to state 16

    InstBlocoDo                    shift and go to state 63
    BlocoDoWhile                   shift and go to state 106
    Atribuicao                     shift and go to state 64
    Printf                         shift and go to state 65
    Scanf                          shift and go to state 66
    If                             shift and go to state 67

state 64

    (75) InstBlocoDo -> Atribuicao .

    ID              reduce using rule 75 (InstBlocoDo -> Atribuicao .)
    PRINT           reduce using rule 75 (InstBlocoDo -> Atribuicao .)
    SCAN            reduce using rule 75 (InstBlocoDo -> Atribuicao .)
    IF              reduce using rule 75 (InstBlocoDo -> Atribuicao .)
    CD              reduce using rule 75 (InstBlocoDo -> Atribuicao .)


state 65

    (76) InstBlocoDo -> Printf .

    ID              reduce using rule 76 (InstBlocoDo -> Printf .)
    PRINT           reduce using rule 76 (InstBlocoDo -> Printf .)
    SCAN            reduce using rule 76 (InstBlocoDo -> Printf .)
    IF              reduce using rule 76 (InstBlocoDo -> Printf .)
    CD              reduce using rule 76 (InstBlocoDo -> Printf .)


state 66

    (77) InstBlocoDo -> Scanf .

    ID              reduce using rule 77 (InstBlocoDo -> Scanf .)
    PRINT           reduce using rule 77 (InstBlocoDo -> Scanf .)
    SCAN            reduce using rule 77 (InstBlocoDo -> Scanf .)
    IF              reduce using rule 77 (InstBlocoDo -> Scanf .)
    CD              reduce using rule 77 (InstBlocoDo -> Scanf .)


state 67

    (78) InstBlocoDo -> If .

    ID              reduce using rule 78 (InstBlocoDo -> If .)
    PRINT           reduce using rule 78 (InstBlocoDo -> If .)
    SCAN            reduce using rule 78 (InstBlocoDo -> If .)
    IF              reduce using rule 78 (InstBlocoDo -> If .)
    CD              reduce using rule 78 (InstBlocoDo -> If .)


state 68

    (7) RestoDeclInt -> ID RE NUM . RD RestoArrayInt

    RD              shift and go to state 107


state 69

    (10) OpcDeclInt -> IGUAL SegueIgual .

    INT             reduce using rule 10 (OpcDeclInt -> IGUAL SegueIgual .)
    FLOAT           reduce using rule 10 (OpcDeclInt -> IGUAL SegueIgual .)
    ID              reduce using rule 10 (OpcDeclInt -> IGUAL SegueIgual .)
    PRINT           reduce using rule 10 (OpcDeclInt -> IGUAL SegueIgual .)
    SCAN            reduce using rule 10 (OpcDeclInt -> IGUAL SegueIgual .)
    IF              reduce using rule 10 (OpcDeclInt -> IGUAL SegueIgual .)
    DO              reduce using rule 10 (OpcDeclInt -> IGUAL SegueIgual .)
    $end            reduce using rule 10 (OpcDeclInt -> IGUAL SegueIgual .)


state 70

    (18) SegueIgual -> NUM . PV

    PV              shift and go to state 108


state 71

    (19) SegueIgual -> REAL . PV

    PV              shift and go to state 109


state 72

    (13) RestoDeclFloat -> ID RE NUM . RD RestoArrayFloat

    RD              shift and go to state 110


state 73

    (16) OpcDeclFloat -> IGUAL SegueIgual .

    INT             reduce using rule 16 (OpcDeclFloat -> IGUAL SegueIgual .)
    FLOAT           reduce using rule 16 (OpcDeclFloat -> IGUAL SegueIgual .)
    ID              reduce using rule 16 (OpcDeclFloat -> IGUAL SegueIgual .)
    PRINT           reduce using rule 16 (OpcDeclFloat -> IGUAL SegueIgual .)
    SCAN            reduce using rule 16 (OpcDeclFloat -> IGUAL SegueIgual .)
    IF              reduce using rule 16 (OpcDeclFloat -> IGUAL SegueIgual .)
    DO              reduce using rule 16 (OpcDeclFloat -> IGUAL SegueIgual .)
    $end            reduce using rule 16 (OpcDeclFloat -> IGUAL SegueIgual .)


state 74

    (30) RestoAtrib -> Exp ADD . Exp PV
    (33) Exp -> . Exp2 MUL Exp2
    (34) Exp -> . Exp2 DIV Exp2
    (35) Exp -> . Exp2 MOD Exp2
    (36) Exp -> . Exp2
    (37) Exp2 -> . ID
    (38) Exp2 -> . NUM
    (39) Exp2 -> . REAL
    (40) Exp2 -> . ID RE NUM RD
    (41) Exp2 -> . ID RE ID RD

    ID              shift and go to state 34
    NUM             shift and go to state 35
    REAL            shift and go to state 36

    Exp                            shift and go to state 111
    Exp2                           shift and go to state 33

state 75

    (32) RestoAtrib -> Exp PV .

    ID              reduce using rule 32 (RestoAtrib -> Exp PV .)
    PRINT           reduce using rule 32 (RestoAtrib -> Exp PV .)
    SCAN            reduce using rule 32 (RestoAtrib -> Exp PV .)
    IF              reduce using rule 32 (RestoAtrib -> Exp PV .)
    DO              reduce using rule 32 (RestoAtrib -> Exp PV .)
    $end            reduce using rule 32 (RestoAtrib -> Exp PV .)
    CD              reduce using rule 32 (RestoAtrib -> Exp PV .)


state 76

    (31) RestoAtrib -> Exp SUB . Exp PV
    (33) Exp -> . Exp2 MUL Exp2
    (34) Exp -> . Exp2 DIV Exp2
    (35) Exp -> . Exp2 MOD Exp2
    (36) Exp -> . Exp2
    (37) Exp2 -> . ID
    (38) Exp2 -> . NUM
    (39) Exp2 -> . REAL
    (40) Exp2 -> . ID RE NUM RD
    (41) Exp2 -> . ID RE ID RD

    ID              shift and go to state 34
    NUM             shift and go to state 35
    REAL            shift and go to state 36

    Exp                            shift and go to state 112
    Exp2                           shift and go to state 33

state 77

    (29) Atribuicao -> ID RE ID RD . IGUAL RestoAtrib

    IGUAL           shift and go to state 113


state 78

    (28) Atribuicao -> ID RE NUM RD . IGUAL RestoAtrib

    IGUAL           shift and go to state 114


state 79

    (42) Printf -> PRINT PE TEXT RestoPrintf .

    ID              reduce using rule 42 (Printf -> PRINT PE TEXT RestoPrintf .)
    PRINT           reduce using rule 42 (Printf -> PRINT PE TEXT RestoPrintf .)
    SCAN            reduce using rule 42 (Printf -> PRINT PE TEXT RestoPrintf .)
    IF              reduce using rule 42 (Printf -> PRINT PE TEXT RestoPrintf .)
    DO              reduce using rule 42 (Printf -> PRINT PE TEXT RestoPrintf .)
    $end            reduce using rule 42 (Printf -> PRINT PE TEXT RestoPrintf .)
    CD              reduce using rule 42 (Printf -> PRINT PE TEXT RestoPrintf .)


state 80

    (43) RestoPrintf -> PD . PV

    PV              shift and go to state 115


state 81

    (44) RestoPrintf -> VIR . ContPrintf
    (45) ContPrintf -> . ID PD PV
    (46) ContPrintf -> . ID RE NUM RD PD PV
    (47) ContPrintf -> . ID RE ID RD PD PV

    ID              shift and go to state 117

    ContPrintf                     shift and go to state 116

state 82

    (48) Scanf -> SCAN PE TEXT VIR . RestoScanf
    (49) RestoScanf -> . ENDID PD PV
    (50) RestoScanf -> . ENDID RE NUM RD PD PV
    (51) RestoScanf -> . ENDID RE ID RD PD PV

    ENDID           shift and go to state 119

    RestoScanf                     shift and go to state 118

state 83

    (52) If -> IF Cond CE BlocoInstIf . CD

    CD              shift and go to state 120


state 84

    (66) BlocoInstIf -> InstBlocoIf . BlocoInstIf
    (66) BlocoInstIf -> . InstBlocoIf BlocoInstIf
    (67) BlocoInstIf -> .
    (68) InstBlocoIf -> . Atribuicao
    (69) InstBlocoIf -> . Printf
    (70) InstBlocoIf -> . Scanf
    (71) InstBlocoIf -> . If
    (27) Atribuicao -> . ID IGUAL RestoAtrib
    (28) Atribuicao -> . ID RE NUM RD IGUAL RestoAtrib
    (29) Atribuicao -> . ID RE ID RD IGUAL RestoAtrib
    (42) Printf -> . PRINT PE TEXT RestoPrintf
    (48) Scanf -> . SCAN PE TEXT VIR RestoScanf
    (52) If -> . IF Cond CE BlocoInstIf CD

    CD              reduce using rule 67 (BlocoInstIf -> .)
    ID              shift and go to state 13
    PRINT           shift and go to state 14
    SCAN            shift and go to state 15
    IF              shift and go to state 16

    InstBlocoIf                    shift and go to state 84
    BlocoInstIf                    shift and go to state 121
    Atribuicao                     shift and go to state 85
    Printf                         shift and go to state 86
    Scanf                          shift and go to state 87
    If                             shift and go to state 88

state 85

    (68) InstBlocoIf -> Atribuicao .

    ID              reduce using rule 68 (InstBlocoIf -> Atribuicao .)
    PRINT           reduce using rule 68 (InstBlocoIf -> Atribuicao .)
    SCAN            reduce using rule 68 (InstBlocoIf -> Atribuicao .)
    IF              reduce using rule 68 (InstBlocoIf -> Atribuicao .)
    CD              reduce using rule 68 (InstBlocoIf -> Atribuicao .)


state 86

    (69) InstBlocoIf -> Printf .

    ID              reduce using rule 69 (InstBlocoIf -> Printf .)
    PRINT           reduce using rule 69 (InstBlocoIf -> Printf .)
    SCAN            reduce using rule 69 (InstBlocoIf -> Printf .)
    IF              reduce using rule 69 (InstBlocoIf -> Printf .)
    CD              reduce using rule 69 (InstBlocoIf -> Printf .)


state 87

    (70) InstBlocoIf -> Scanf .

    ID              reduce using rule 70 (InstBlocoIf -> Scanf .)
    PRINT           reduce using rule 70 (InstBlocoIf -> Scanf .)
    SCAN            reduce using rule 70 (InstBlocoIf -> Scanf .)
    IF              reduce using rule 70 (InstBlocoIf -> Scanf .)
    CD              reduce using rule 70 (InstBlocoIf -> Scanf .)


state 88

    (71) InstBlocoIf -> If .

    ID              reduce using rule 71 (InstBlocoIf -> If .)
    PRINT           reduce using rule 71 (InstBlocoIf -> If .)
    SCAN            reduce using rule 71 (InstBlocoIf -> If .)
    IF              reduce using rule 71 (InstBlocoIf -> If .)
    CD              reduce using rule 71 (InstBlocoIf -> If .)


state 89

    (61) Conta -> PE Conta2 . PD

    PD              shift and go to state 97


state 90

    (53) Cond -> PE Conta ExpRel . Conta PD
    (61) Conta -> . PE Conta2 PD
    (62) Conta -> . Conta2
    (63) Conta2 -> . Exp SUB Exp
    (64) Conta2 -> . Exp ADD Exp
    (65) Conta2 -> . Exp
    (33) Exp -> . Exp2 MUL Exp2
    (34) Exp -> . Exp2 DIV Exp2
    (35) Exp -> . Exp2 MOD Exp2
    (36) Exp -> . Exp2
    (37) Exp2 -> . ID
    (38) Exp2 -> . NUM
    (39) Exp2 -> . REAL
    (40) Exp2 -> . ID RE NUM RD
    (41) Exp2 -> . ID RE ID RD

    PE              shift and go to state 53
    ID              shift and go to state 34
    NUM             shift and go to state 35
    REAL            shift and go to state 36

    Conta                          shift and go to state 122
    Conta2                         shift and go to state 31
    Exp                            shift and go to state 32
    Exp2                           shift and go to state 33

state 91

    (55) ExpRel -> GT .

    PE              reduce using rule 55 (ExpRel -> GT .)
    ID              reduce using rule 55 (ExpRel -> GT .)
    NUM             reduce using rule 55 (ExpRel -> GT .)
    REAL            reduce using rule 55 (ExpRel -> GT .)


state 92

    (56) ExpRel -> GE .

    PE              reduce using rule 56 (ExpRel -> GE .)
    ID              reduce using rule 56 (ExpRel -> GE .)
    NUM             reduce using rule 56 (ExpRel -> GE .)
    REAL            reduce using rule 56 (ExpRel -> GE .)


state 93

    (57) ExpRel -> LT .

    PE              reduce using rule 57 (ExpRel -> LT .)
    ID              reduce using rule 57 (ExpRel -> LT .)
    NUM             reduce using rule 57 (ExpRel -> LT .)
    REAL            reduce using rule 57 (ExpRel -> LT .)


state 94

    (58) ExpRel -> LE .

    PE              reduce using rule 58 (ExpRel -> LE .)
    ID              reduce using rule 58 (ExpRel -> LE .)
    NUM             reduce using rule 58 (ExpRel -> LE .)
    REAL            reduce using rule 58 (ExpRel -> LE .)


state 95

    (59) ExpRel -> EQ .

    PE              reduce using rule 59 (ExpRel -> EQ .)
    ID              reduce using rule 59 (ExpRel -> EQ .)
    NUM             reduce using rule 59 (ExpRel -> EQ .)
    REAL            reduce using rule 59 (ExpRel -> EQ .)


state 96

    (60) ExpRel -> DIF .

    PE              reduce using rule 60 (ExpRel -> DIF .)
    ID              reduce using rule 60 (ExpRel -> DIF .)
    NUM             reduce using rule 60 (ExpRel -> DIF .)
    REAL            reduce using rule 60 (ExpRel -> DIF .)


state 97

    (61) Conta -> PE Conta2 PD .

    CE              reduce using rule 61 (Conta -> PE Conta2 PD .)
    GT              reduce using rule 61 (Conta -> PE Conta2 PD .)
    GE              reduce using rule 61 (Conta -> PE Conta2 PD .)
    LT              reduce using rule 61 (Conta -> PE Conta2 PD .)
    LE              reduce using rule 61 (Conta -> PE Conta2 PD .)
    EQ              reduce using rule 61 (Conta -> PE Conta2 PD .)
    DIF             reduce using rule 61 (Conta -> PE Conta2 PD .)
    PD              reduce using rule 61 (Conta -> PE Conta2 PD .)
    PV              reduce using rule 61 (Conta -> PE Conta2 PD .)


state 98

    (63) Conta2 -> Exp SUB Exp .

    CE              reduce using rule 63 (Conta2 -> Exp SUB Exp .)
    PD              reduce using rule 63 (Conta2 -> Exp SUB Exp .)
    GT              reduce using rule 63 (Conta2 -> Exp SUB Exp .)
    GE              reduce using rule 63 (Conta2 -> Exp SUB Exp .)
    LT              reduce using rule 63 (Conta2 -> Exp SUB Exp .)
    LE              reduce using rule 63 (Conta2 -> Exp SUB Exp .)
    EQ              reduce using rule 63 (Conta2 -> Exp SUB Exp .)
    DIF             reduce using rule 63 (Conta2 -> Exp SUB Exp .)
    PV              reduce using rule 63 (Conta2 -> Exp SUB Exp .)


state 99

    (64) Conta2 -> Exp ADD Exp .

    CE              reduce using rule 64 (Conta2 -> Exp ADD Exp .)
    PD              reduce using rule 64 (Conta2 -> Exp ADD Exp .)
    GT              reduce using rule 64 (Conta2 -> Exp ADD Exp .)
    GE              reduce using rule 64 (Conta2 -> Exp ADD Exp .)
    LT              reduce using rule 64 (Conta2 -> Exp ADD Exp .)
    LE              reduce using rule 64 (Conta2 -> Exp ADD Exp .)
    EQ              reduce using rule 64 (Conta2 -> Exp ADD Exp .)
    DIF             reduce using rule 64 (Conta2 -> Exp ADD Exp .)
    PV              reduce using rule 64 (Conta2 -> Exp ADD Exp .)


state 100

    (33) Exp -> Exp2 MUL Exp2 .

    SUB             reduce using rule 33 (Exp -> Exp2 MUL Exp2 .)
    ADD             reduce using rule 33 (Exp -> Exp2 MUL Exp2 .)
    CE              reduce using rule 33 (Exp -> Exp2 MUL Exp2 .)
    PV              reduce using rule 33 (Exp -> Exp2 MUL Exp2 .)
    PD              reduce using rule 33 (Exp -> Exp2 MUL Exp2 .)
    GT              reduce using rule 33 (Exp -> Exp2 MUL Exp2 .)
    GE              reduce using rule 33 (Exp -> Exp2 MUL Exp2 .)
    LT              reduce using rule 33 (Exp -> Exp2 MUL Exp2 .)
    LE              reduce using rule 33 (Exp -> Exp2 MUL Exp2 .)
    EQ              reduce using rule 33 (Exp -> Exp2 MUL Exp2 .)
    DIF             reduce using rule 33 (Exp -> Exp2 MUL Exp2 .)


state 101

    (34) Exp -> Exp2 DIV Exp2 .

    SUB             reduce using rule 34 (Exp -> Exp2 DIV Exp2 .)
    ADD             reduce using rule 34 (Exp -> Exp2 DIV Exp2 .)
    CE              reduce using rule 34 (Exp -> Exp2 DIV Exp2 .)
    PV              reduce using rule 34 (Exp -> Exp2 DIV Exp2 .)
    PD              reduce using rule 34 (Exp -> Exp2 DIV Exp2 .)
    GT              reduce using rule 34 (Exp -> Exp2 DIV Exp2 .)
    GE              reduce using rule 34 (Exp -> Exp2 DIV Exp2 .)
    LT              reduce using rule 34 (Exp -> Exp2 DIV Exp2 .)
    LE              reduce using rule 34 (Exp -> Exp2 DIV Exp2 .)
    EQ              reduce using rule 34 (Exp -> Exp2 DIV Exp2 .)
    DIF             reduce using rule 34 (Exp -> Exp2 DIV Exp2 .)


state 102

    (35) Exp -> Exp2 MOD Exp2 .

    SUB             reduce using rule 35 (Exp -> Exp2 MOD Exp2 .)
    ADD             reduce using rule 35 (Exp -> Exp2 MOD Exp2 .)
    CE              reduce using rule 35 (Exp -> Exp2 MOD Exp2 .)
    PV              reduce using rule 35 (Exp -> Exp2 MOD Exp2 .)
    PD              reduce using rule 35 (Exp -> Exp2 MOD Exp2 .)
    GT              reduce using rule 35 (Exp -> Exp2 MOD Exp2 .)
    GE              reduce using rule 35 (Exp -> Exp2 MOD Exp2 .)
    LT              reduce using rule 35 (Exp -> Exp2 MOD Exp2 .)
    LE              reduce using rule 35 (Exp -> Exp2 MOD Exp2 .)
    EQ              reduce using rule 35 (Exp -> Exp2 MOD Exp2 .)
    DIF             reduce using rule 35 (Exp -> Exp2 MOD Exp2 .)


state 103

    (41) Exp2 -> ID RE ID . RD

    RD              shift and go to state 123


state 104

    (40) Exp2 -> ID RE NUM . RD

    RD              shift and go to state 124


state 105

    (72) DoWhile -> DO CE BlocoDoWhile CD . WHILE CondDo PV

    WHILE           shift and go to state 125


state 106

    (73) BlocoDoWhile -> InstBlocoDo BlocoDoWhile .

    CD              reduce using rule 73 (BlocoDoWhile -> InstBlocoDo BlocoDoWhile .)


state 107

    (7) RestoDeclInt -> ID RE NUM RD . RestoArrayInt
    (8) RestoArrayInt -> . IGUAL OpcDeclInt
    (9) RestoArrayInt -> . PV

    IGUAL           shift and go to state 127
    PV              shift and go to state 128

    RestoArrayInt                  shift and go to state 126

state 108

    (18) SegueIgual -> NUM PV .

    INT             reduce using rule 18 (SegueIgual -> NUM PV .)
    FLOAT           reduce using rule 18 (SegueIgual -> NUM PV .)
    ID              reduce using rule 18 (SegueIgual -> NUM PV .)
    PRINT           reduce using rule 18 (SegueIgual -> NUM PV .)
    SCAN            reduce using rule 18 (SegueIgual -> NUM PV .)
    IF              reduce using rule 18 (SegueIgual -> NUM PV .)
    DO              reduce using rule 18 (SegueIgual -> NUM PV .)
    $end            reduce using rule 18 (SegueIgual -> NUM PV .)


state 109

    (19) SegueIgual -> REAL PV .

    INT             reduce using rule 19 (SegueIgual -> REAL PV .)
    FLOAT           reduce using rule 19 (SegueIgual -> REAL PV .)
    ID              reduce using rule 19 (SegueIgual -> REAL PV .)
    PRINT           reduce using rule 19 (SegueIgual -> REAL PV .)
    SCAN            reduce using rule 19 (SegueIgual -> REAL PV .)
    IF              reduce using rule 19 (SegueIgual -> REAL PV .)
    DO              reduce using rule 19 (SegueIgual -> REAL PV .)
    $end            reduce using rule 19 (SegueIgual -> REAL PV .)


state 110

    (13) RestoDeclFloat -> ID RE NUM RD . RestoArrayFloat
    (14) RestoArrayFloat -> . IGUAL OpcDeclFloat
    (15) RestoArrayFloat -> . PV

    IGUAL           shift and go to state 130
    PV              shift and go to state 131

    RestoArrayFloat                shift and go to state 129

state 111

    (30) RestoAtrib -> Exp ADD Exp . PV

    PV              shift and go to state 132


state 112

    (31) RestoAtrib -> Exp SUB Exp . PV

    PV              shift and go to state 133


state 113

    (29) Atribuicao -> ID RE ID RD IGUAL . RestoAtrib
    (30) RestoAtrib -> . Exp ADD Exp PV
    (31) RestoAtrib -> . Exp SUB Exp PV
    (32) RestoAtrib -> . Exp PV
    (33) Exp -> . Exp2 MUL Exp2
    (34) Exp -> . Exp2 DIV Exp2
    (35) Exp -> . Exp2 MOD Exp2
    (36) Exp -> . Exp2
    (37) Exp2 -> . ID
    (38) Exp2 -> . NUM
    (39) Exp2 -> . REAL
    (40) Exp2 -> . ID RE NUM RD
    (41) Exp2 -> . ID RE ID RD

    ID              shift and go to state 34
    NUM             shift and go to state 35
    REAL            shift and go to state 36

    RestoAtrib                     shift and go to state 134
    Exp                            shift and go to state 47
    Exp2                           shift and go to state 33

state 114

    (28) Atribuicao -> ID RE NUM RD IGUAL . RestoAtrib
    (30) RestoAtrib -> . Exp ADD Exp PV
    (31) RestoAtrib -> . Exp SUB Exp PV
    (32) RestoAtrib -> . Exp PV
    (33) Exp -> . Exp2 MUL Exp2
    (34) Exp -> . Exp2 DIV Exp2
    (35) Exp -> . Exp2 MOD Exp2
    (36) Exp -> . Exp2
    (37) Exp2 -> . ID
    (38) Exp2 -> . NUM
    (39) Exp2 -> . REAL
    (40) Exp2 -> . ID RE NUM RD
    (41) Exp2 -> . ID RE ID RD

    ID              shift and go to state 34
    NUM             shift and go to state 35
    REAL            shift and go to state 36

    RestoAtrib                     shift and go to state 135
    Exp                            shift and go to state 47
    Exp2                           shift and go to state 33

state 115

    (43) RestoPrintf -> PD PV .

    ID              reduce using rule 43 (RestoPrintf -> PD PV .)
    PRINT           reduce using rule 43 (RestoPrintf -> PD PV .)
    SCAN            reduce using rule 43 (RestoPrintf -> PD PV .)
    IF              reduce using rule 43 (RestoPrintf -> PD PV .)
    DO              reduce using rule 43 (RestoPrintf -> PD PV .)
    $end            reduce using rule 43 (RestoPrintf -> PD PV .)
    CD              reduce using rule 43 (RestoPrintf -> PD PV .)


state 116

    (44) RestoPrintf -> VIR ContPrintf .

    ID              reduce using rule 44 (RestoPrintf -> VIR ContPrintf .)
    PRINT           reduce using rule 44 (RestoPrintf -> VIR ContPrintf .)
    SCAN            reduce using rule 44 (RestoPrintf -> VIR ContPrintf .)
    IF              reduce using rule 44 (RestoPrintf -> VIR ContPrintf .)
    DO              reduce using rule 44 (RestoPrintf -> VIR ContPrintf .)
    $end            reduce using rule 44 (RestoPrintf -> VIR ContPrintf .)
    CD              reduce using rule 44 (RestoPrintf -> VIR ContPrintf .)


state 117

    (45) ContPrintf -> ID . PD PV
    (46) ContPrintf -> ID . RE NUM RD PD PV
    (47) ContPrintf -> ID . RE ID RD PD PV

    PD              shift and go to state 136
    RE              shift and go to state 137


state 118

    (48) Scanf -> SCAN PE TEXT VIR RestoScanf .

    ID              reduce using rule 48 (Scanf -> SCAN PE TEXT VIR RestoScanf .)
    PRINT           reduce using rule 48 (Scanf -> SCAN PE TEXT VIR RestoScanf .)
    SCAN            reduce using rule 48 (Scanf -> SCAN PE TEXT VIR RestoScanf .)
    IF              reduce using rule 48 (Scanf -> SCAN PE TEXT VIR RestoScanf .)
    DO              reduce using rule 48 (Scanf -> SCAN PE TEXT VIR RestoScanf .)
    $end            reduce using rule 48 (Scanf -> SCAN PE TEXT VIR RestoScanf .)
    CD              reduce using rule 48 (Scanf -> SCAN PE TEXT VIR RestoScanf .)


state 119

    (49) RestoScanf -> ENDID . PD PV
    (50) RestoScanf -> ENDID . RE NUM RD PD PV
    (51) RestoScanf -> ENDID . RE ID RD PD PV

    PD              shift and go to state 138
    RE              shift and go to state 139


state 120

    (52) If -> IF Cond CE BlocoInstIf CD .

    ID              reduce using rule 52 (If -> IF Cond CE BlocoInstIf CD .)
    PRINT           reduce using rule 52 (If -> IF Cond CE BlocoInstIf CD .)
    SCAN            reduce using rule 52 (If -> IF Cond CE BlocoInstIf CD .)
    IF              reduce using rule 52 (If -> IF Cond CE BlocoInstIf CD .)
    DO              reduce using rule 52 (If -> IF Cond CE BlocoInstIf CD .)
    $end            reduce using rule 52 (If -> IF Cond CE BlocoInstIf CD .)
    CD              reduce using rule 52 (If -> IF Cond CE BlocoInstIf CD .)


state 121

    (66) BlocoInstIf -> InstBlocoIf BlocoInstIf .

    CD              reduce using rule 66 (BlocoInstIf -> InstBlocoIf BlocoInstIf .)


state 122

    (53) Cond -> PE Conta ExpRel Conta . PD

    PD              shift and go to state 140


state 123

    (41) Exp2 -> ID RE ID RD .

    MUL             reduce using rule 41 (Exp2 -> ID RE ID RD .)
    DIV             reduce using rule 41 (Exp2 -> ID RE ID RD .)
    MOD             reduce using rule 41 (Exp2 -> ID RE ID RD .)
    SUB             reduce using rule 41 (Exp2 -> ID RE ID RD .)
    ADD             reduce using rule 41 (Exp2 -> ID RE ID RD .)
    CE              reduce using rule 41 (Exp2 -> ID RE ID RD .)
    PV              reduce using rule 41 (Exp2 -> ID RE ID RD .)
    PD              reduce using rule 41 (Exp2 -> ID RE ID RD .)
    GT              reduce using rule 41 (Exp2 -> ID RE ID RD .)
    GE              reduce using rule 41 (Exp2 -> ID RE ID RD .)
    LT              reduce using rule 41 (Exp2 -> ID RE ID RD .)
    LE              reduce using rule 41 (Exp2 -> ID RE ID RD .)
    EQ              reduce using rule 41 (Exp2 -> ID RE ID RD .)
    DIF             reduce using rule 41 (Exp2 -> ID RE ID RD .)


state 124

    (40) Exp2 -> ID RE NUM RD .

    MUL             reduce using rule 40 (Exp2 -> ID RE NUM RD .)
    DIV             reduce using rule 40 (Exp2 -> ID RE NUM RD .)
    MOD             reduce using rule 40 (Exp2 -> ID RE NUM RD .)
    SUB             reduce using rule 40 (Exp2 -> ID RE NUM RD .)
    ADD             reduce using rule 40 (Exp2 -> ID RE NUM RD .)
    CE              reduce using rule 40 (Exp2 -> ID RE NUM RD .)
    PV              reduce using rule 40 (Exp2 -> ID RE NUM RD .)
    PD              reduce using rule 40 (Exp2 -> ID RE NUM RD .)
    GT              reduce using rule 40 (Exp2 -> ID RE NUM RD .)
    GE              reduce using rule 40 (Exp2 -> ID RE NUM RD .)
    LT              reduce using rule 40 (Exp2 -> ID RE NUM RD .)
    LE              reduce using rule 40 (Exp2 -> ID RE NUM RD .)
    EQ              reduce using rule 40 (Exp2 -> ID RE NUM RD .)
    DIF             reduce using rule 40 (Exp2 -> ID RE NUM RD .)


state 125

    (72) DoWhile -> DO CE BlocoDoWhile CD WHILE . CondDo PV
    (79) CondDo -> . PE Conta ExpRelDo Conta PD
    (80) CondDo -> . Conta
    (61) Conta -> . PE Conta2 PD
    (62) Conta -> . Conta2
    (63) Conta2 -> . Exp SUB Exp
    (64) Conta2 -> . Exp ADD Exp
    (65) Conta2 -> . Exp
    (33) Exp -> . Exp2 MUL Exp2
    (34) Exp -> . Exp2 DIV Exp2
    (35) Exp -> . Exp2 MOD Exp2
    (36) Exp -> . Exp2
    (37) Exp2 -> . ID
    (38) Exp2 -> . NUM
    (39) Exp2 -> . REAL
    (40) Exp2 -> . ID RE NUM RD
    (41) Exp2 -> . ID RE ID RD

    PE              shift and go to state 142
    ID              shift and go to state 34
    NUM             shift and go to state 35
    REAL            shift and go to state 36

    CondDo                         shift and go to state 141
    Conta                          shift and go to state 143
    Conta2                         shift and go to state 31
    Exp                            shift and go to state 32
    Exp2                           shift and go to state 33

state 126

    (7) RestoDeclInt -> ID RE NUM RD RestoArrayInt .

    INT             reduce using rule 7 (RestoDeclInt -> ID RE NUM RD RestoArrayInt .)
    FLOAT           reduce using rule 7 (RestoDeclInt -> ID RE NUM RD RestoArrayInt .)
    ID              reduce using rule 7 (RestoDeclInt -> ID RE NUM RD RestoArrayInt .)
    PRINT           reduce using rule 7 (RestoDeclInt -> ID RE NUM RD RestoArrayInt .)
    SCAN            reduce using rule 7 (RestoDeclInt -> ID RE NUM RD RestoArrayInt .)
    IF              reduce using rule 7 (RestoDeclInt -> ID RE NUM RD RestoArrayInt .)
    DO              reduce using rule 7 (RestoDeclInt -> ID RE NUM RD RestoArrayInt .)
    $end            reduce using rule 7 (RestoDeclInt -> ID RE NUM RD RestoArrayInt .)


state 127

    (8) RestoArrayInt -> IGUAL . OpcDeclInt
    (10) OpcDeclInt -> . IGUAL SegueIgual
    (11) OpcDeclInt -> . PV

    IGUAL           shift and go to state 40
    PV              shift and go to state 41

    OpcDeclInt                     shift and go to state 144

state 128

    (9) RestoArrayInt -> PV .

    INT             reduce using rule 9 (RestoArrayInt -> PV .)
    FLOAT           reduce using rule 9 (RestoArrayInt -> PV .)
    ID              reduce using rule 9 (RestoArrayInt -> PV .)
    PRINT           reduce using rule 9 (RestoArrayInt -> PV .)
    SCAN            reduce using rule 9 (RestoArrayInt -> PV .)
    IF              reduce using rule 9 (RestoArrayInt -> PV .)
    DO              reduce using rule 9 (RestoArrayInt -> PV .)
    $end            reduce using rule 9 (RestoArrayInt -> PV .)


state 129

    (13) RestoDeclFloat -> ID RE NUM RD RestoArrayFloat .

    INT             reduce using rule 13 (RestoDeclFloat -> ID RE NUM RD RestoArrayFloat .)
    FLOAT           reduce using rule 13 (RestoDeclFloat -> ID RE NUM RD RestoArrayFloat .)
    ID              reduce using rule 13 (RestoDeclFloat -> ID RE NUM RD RestoArrayFloat .)
    PRINT           reduce using rule 13 (RestoDeclFloat -> ID RE NUM RD RestoArrayFloat .)
    SCAN            reduce using rule 13 (RestoDeclFloat -> ID RE NUM RD RestoArrayFloat .)
    IF              reduce using rule 13 (RestoDeclFloat -> ID RE NUM RD RestoArrayFloat .)
    DO              reduce using rule 13 (RestoDeclFloat -> ID RE NUM RD RestoArrayFloat .)
    $end            reduce using rule 13 (RestoDeclFloat -> ID RE NUM RD RestoArrayFloat .)


state 130

    (14) RestoArrayFloat -> IGUAL . OpcDeclFloat
    (16) OpcDeclFloat -> . IGUAL SegueIgual
    (17) OpcDeclFloat -> . PV

    IGUAL           shift and go to state 44
    PV              shift and go to state 45

    OpcDeclFloat                   shift and go to state 145

state 131

    (15) RestoArrayFloat -> PV .

    INT             reduce using rule 15 (RestoArrayFloat -> PV .)
    FLOAT           reduce using rule 15 (RestoArrayFloat -> PV .)
    ID              reduce using rule 15 (RestoArrayFloat -> PV .)
    PRINT           reduce using rule 15 (RestoArrayFloat -> PV .)
    SCAN            reduce using rule 15 (RestoArrayFloat -> PV .)
    IF              reduce using rule 15 (RestoArrayFloat -> PV .)
    DO              reduce using rule 15 (RestoArrayFloat -> PV .)
    $end            reduce using rule 15 (RestoArrayFloat -> PV .)


state 132

    (30) RestoAtrib -> Exp ADD Exp PV .

    ID              reduce using rule 30 (RestoAtrib -> Exp ADD Exp PV .)
    PRINT           reduce using rule 30 (RestoAtrib -> Exp ADD Exp PV .)
    SCAN            reduce using rule 30 (RestoAtrib -> Exp ADD Exp PV .)
    IF              reduce using rule 30 (RestoAtrib -> Exp ADD Exp PV .)
    DO              reduce using rule 30 (RestoAtrib -> Exp ADD Exp PV .)
    $end            reduce using rule 30 (RestoAtrib -> Exp ADD Exp PV .)
    CD              reduce using rule 30 (RestoAtrib -> Exp ADD Exp PV .)


state 133

    (31) RestoAtrib -> Exp SUB Exp PV .

    ID              reduce using rule 31 (RestoAtrib -> Exp SUB Exp PV .)
    PRINT           reduce using rule 31 (RestoAtrib -> Exp SUB Exp PV .)
    SCAN            reduce using rule 31 (RestoAtrib -> Exp SUB Exp PV .)
    IF              reduce using rule 31 (RestoAtrib -> Exp SUB Exp PV .)
    DO              reduce using rule 31 (RestoAtrib -> Exp SUB Exp PV .)
    $end            reduce using rule 31 (RestoAtrib -> Exp SUB Exp PV .)
    CD              reduce using rule 31 (RestoAtrib -> Exp SUB Exp PV .)


state 134

    (29) Atribuicao -> ID RE ID RD IGUAL RestoAtrib .

    ID              reduce using rule 29 (Atribuicao -> ID RE ID RD IGUAL RestoAtrib .)
    PRINT           reduce using rule 29 (Atribuicao -> ID RE ID RD IGUAL RestoAtrib .)
    SCAN            reduce using rule 29 (Atribuicao -> ID RE ID RD IGUAL RestoAtrib .)
    IF              reduce using rule 29 (Atribuicao -> ID RE ID RD IGUAL RestoAtrib .)
    DO              reduce using rule 29 (Atribuicao -> ID RE ID RD IGUAL RestoAtrib .)
    $end            reduce using rule 29 (Atribuicao -> ID RE ID RD IGUAL RestoAtrib .)
    CD              reduce using rule 29 (Atribuicao -> ID RE ID RD IGUAL RestoAtrib .)


state 135

    (28) Atribuicao -> ID RE NUM RD IGUAL RestoAtrib .

    ID              reduce using rule 28 (Atribuicao -> ID RE NUM RD IGUAL RestoAtrib .)
    PRINT           reduce using rule 28 (Atribuicao -> ID RE NUM RD IGUAL RestoAtrib .)
    SCAN            reduce using rule 28 (Atribuicao -> ID RE NUM RD IGUAL RestoAtrib .)
    IF              reduce using rule 28 (Atribuicao -> ID RE NUM RD IGUAL RestoAtrib .)
    DO              reduce using rule 28 (Atribuicao -> ID RE NUM RD IGUAL RestoAtrib .)
    $end            reduce using rule 28 (Atribuicao -> ID RE NUM RD IGUAL RestoAtrib .)
    CD              reduce using rule 28 (Atribuicao -> ID RE NUM RD IGUAL RestoAtrib .)


state 136

    (45) ContPrintf -> ID PD . PV

    PV              shift and go to state 146


state 137

    (46) ContPrintf -> ID RE . NUM RD PD PV
    (47) ContPrintf -> ID RE . ID RD PD PV

    NUM             shift and go to state 148
    ID              shift and go to state 147


state 138

    (49) RestoScanf -> ENDID PD . PV

    PV              shift and go to state 149


state 139

    (50) RestoScanf -> ENDID RE . NUM RD PD PV
    (51) RestoScanf -> ENDID RE . ID RD PD PV

    NUM             shift and go to state 150
    ID              shift and go to state 151


state 140

    (53) Cond -> PE Conta ExpRel Conta PD .

    CE              reduce using rule 53 (Cond -> PE Conta ExpRel Conta PD .)


state 141

    (72) DoWhile -> DO CE BlocoDoWhile CD WHILE CondDo . PV

    PV              shift and go to state 152


state 142

    (79) CondDo -> PE . Conta ExpRelDo Conta PD
    (61) Conta -> PE . Conta2 PD
    (61) Conta -> . PE Conta2 PD
    (62) Conta -> . Conta2
    (63) Conta2 -> . Exp SUB Exp
    (64) Conta2 -> . Exp ADD Exp
    (65) Conta2 -> . Exp
    (33) Exp -> . Exp2 MUL Exp2
    (34) Exp -> . Exp2 DIV Exp2
    (35) Exp -> . Exp2 MOD Exp2
    (36) Exp -> . Exp2
    (37) Exp2 -> . ID
    (38) Exp2 -> . NUM
    (39) Exp2 -> . REAL
    (40) Exp2 -> . ID RE NUM RD
    (41) Exp2 -> . ID RE ID RD

    PE              shift and go to state 53
    ID              shift and go to state 34
    NUM             shift and go to state 35
    REAL            shift and go to state 36

    Conta                          shift and go to state 153
    Conta2                         shift and go to state 55
    Exp                            shift and go to state 32
    Exp2                           shift and go to state 33

state 143

    (80) CondDo -> Conta .

    PV              reduce using rule 80 (CondDo -> Conta .)


state 144

    (8) RestoArrayInt -> IGUAL OpcDeclInt .

    INT             reduce using rule 8 (RestoArrayInt -> IGUAL OpcDeclInt .)
    FLOAT           reduce using rule 8 (RestoArrayInt -> IGUAL OpcDeclInt .)
    ID              reduce using rule 8 (RestoArrayInt -> IGUAL OpcDeclInt .)
    PRINT           reduce using rule 8 (RestoArrayInt -> IGUAL OpcDeclInt .)
    SCAN            reduce using rule 8 (RestoArrayInt -> IGUAL OpcDeclInt .)
    IF              reduce using rule 8 (RestoArrayInt -> IGUAL OpcDeclInt .)
    DO              reduce using rule 8 (RestoArrayInt -> IGUAL OpcDeclInt .)
    $end            reduce using rule 8 (RestoArrayInt -> IGUAL OpcDeclInt .)


state 145

    (14) RestoArrayFloat -> IGUAL OpcDeclFloat .

    INT             reduce using rule 14 (RestoArrayFloat -> IGUAL OpcDeclFloat .)
    FLOAT           reduce using rule 14 (RestoArrayFloat -> IGUAL OpcDeclFloat .)
    ID              reduce using rule 14 (RestoArrayFloat -> IGUAL OpcDeclFloat .)
    PRINT           reduce using rule 14 (RestoArrayFloat -> IGUAL OpcDeclFloat .)
    SCAN            reduce using rule 14 (RestoArrayFloat -> IGUAL OpcDeclFloat .)
    IF              reduce using rule 14 (RestoArrayFloat -> IGUAL OpcDeclFloat .)
    DO              reduce using rule 14 (RestoArrayFloat -> IGUAL OpcDeclFloat .)
    $end            reduce using rule 14 (RestoArrayFloat -> IGUAL OpcDeclFloat .)


state 146

    (45) ContPrintf -> ID PD PV .

    ID              reduce using rule 45 (ContPrintf -> ID PD PV .)
    PRINT           reduce using rule 45 (ContPrintf -> ID PD PV .)
    SCAN            reduce using rule 45 (ContPrintf -> ID PD PV .)
    IF              reduce using rule 45 (ContPrintf -> ID PD PV .)
    DO              reduce using rule 45 (ContPrintf -> ID PD PV .)
    $end            reduce using rule 45 (ContPrintf -> ID PD PV .)
    CD              reduce using rule 45 (ContPrintf -> ID PD PV .)


state 147

    (47) ContPrintf -> ID RE ID . RD PD PV

    RD              shift and go to state 154


state 148

    (46) ContPrintf -> ID RE NUM . RD PD PV

    RD              shift and go to state 155


state 149

    (49) RestoScanf -> ENDID PD PV .

    ID              reduce using rule 49 (RestoScanf -> ENDID PD PV .)
    PRINT           reduce using rule 49 (RestoScanf -> ENDID PD PV .)
    SCAN            reduce using rule 49 (RestoScanf -> ENDID PD PV .)
    IF              reduce using rule 49 (RestoScanf -> ENDID PD PV .)
    DO              reduce using rule 49 (RestoScanf -> ENDID PD PV .)
    $end            reduce using rule 49 (RestoScanf -> ENDID PD PV .)
    CD              reduce using rule 49 (RestoScanf -> ENDID PD PV .)


state 150

    (50) RestoScanf -> ENDID RE NUM . RD PD PV

    RD              shift and go to state 156


state 151

    (51) RestoScanf -> ENDID RE ID . RD PD PV

    RD              shift and go to state 157


state 152

    (72) DoWhile -> DO CE BlocoDoWhile CD WHILE CondDo PV .

    ID              reduce using rule 72 (DoWhile -> DO CE BlocoDoWhile CD WHILE CondDo PV .)
    PRINT           reduce using rule 72 (DoWhile -> DO CE BlocoDoWhile CD WHILE CondDo PV .)
    SCAN            reduce using rule 72 (DoWhile -> DO CE BlocoDoWhile CD WHILE CondDo PV .)
    IF              reduce using rule 72 (DoWhile -> DO CE BlocoDoWhile CD WHILE CondDo PV .)
    DO              reduce using rule 72 (DoWhile -> DO CE BlocoDoWhile CD WHILE CondDo PV .)
    $end            reduce using rule 72 (DoWhile -> DO CE BlocoDoWhile CD WHILE CondDo PV .)


state 153

    (79) CondDo -> PE Conta . ExpRelDo Conta PD
    (81) ExpRelDo -> . GT
    (82) ExpRelDo -> . GE
    (83) ExpRelDo -> . LT
    (84) ExpRelDo -> . LE
    (85) ExpRelDo -> . EQ
    (86) ExpRelDo -> . DIF

    GT              shift and go to state 159
    GE              shift and go to state 160
    LT              shift and go to state 161
    LE              shift and go to state 162
    EQ              shift and go to state 163
    DIF             shift and go to state 164

    ExpRelDo                       shift and go to state 158

state 154

    (47) ContPrintf -> ID RE ID RD . PD PV

    PD              shift and go to state 165


state 155

    (46) ContPrintf -> ID RE NUM RD . PD PV

    PD              shift and go to state 166


state 156

    (50) RestoScanf -> ENDID RE NUM RD . PD PV

    PD              shift and go to state 167


state 157

    (51) RestoScanf -> ENDID RE ID RD . PD PV

    PD              shift and go to state 168


state 158

    (79) CondDo -> PE Conta ExpRelDo . Conta PD
    (61) Conta -> . PE Conta2 PD
    (62) Conta -> . Conta2
    (63) Conta2 -> . Exp SUB Exp
    (64) Conta2 -> . Exp ADD Exp
    (65) Conta2 -> . Exp
    (33) Exp -> . Exp2 MUL Exp2
    (34) Exp -> . Exp2 DIV Exp2
    (35) Exp -> . Exp2 MOD Exp2
    (36) Exp -> . Exp2
    (37) Exp2 -> . ID
    (38) Exp2 -> . NUM
    (39) Exp2 -> . REAL
    (40) Exp2 -> . ID RE NUM RD
    (41) Exp2 -> . ID RE ID RD

    PE              shift and go to state 53
    ID              shift and go to state 34
    NUM             shift and go to state 35
    REAL            shift and go to state 36

    Conta                          shift and go to state 169
    Conta2                         shift and go to state 31
    Exp                            shift and go to state 32
    Exp2                           shift and go to state 33

state 159

    (81) ExpRelDo -> GT .

    PE              reduce using rule 81 (ExpRelDo -> GT .)
    ID              reduce using rule 81 (ExpRelDo -> GT .)
    NUM             reduce using rule 81 (ExpRelDo -> GT .)
    REAL            reduce using rule 81 (ExpRelDo -> GT .)


state 160

    (82) ExpRelDo -> GE .

    PE              reduce using rule 82 (ExpRelDo -> GE .)
    ID              reduce using rule 82 (ExpRelDo -> GE .)
    NUM             reduce using rule 82 (ExpRelDo -> GE .)
    REAL            reduce using rule 82 (ExpRelDo -> GE .)


state 161

    (83) ExpRelDo -> LT .

    PE              reduce using rule 83 (ExpRelDo -> LT .)
    ID              reduce using rule 83 (ExpRelDo -> LT .)
    NUM             reduce using rule 83 (ExpRelDo -> LT .)
    REAL            reduce using rule 83 (ExpRelDo -> LT .)


state 162

    (84) ExpRelDo -> LE .

    PE              reduce using rule 84 (ExpRelDo -> LE .)
    ID              reduce using rule 84 (ExpRelDo -> LE .)
    NUM             reduce using rule 84 (ExpRelDo -> LE .)
    REAL            reduce using rule 84 (ExpRelDo -> LE .)


state 163

    (85) ExpRelDo -> EQ .

    PE              reduce using rule 85 (ExpRelDo -> EQ .)
    ID              reduce using rule 85 (ExpRelDo -> EQ .)
    NUM             reduce using rule 85 (ExpRelDo -> EQ .)
    REAL            reduce using rule 85 (ExpRelDo -> EQ .)


state 164

    (86) ExpRelDo -> DIF .

    PE              reduce using rule 86 (ExpRelDo -> DIF .)
    ID              reduce using rule 86 (ExpRelDo -> DIF .)
    NUM             reduce using rule 86 (ExpRelDo -> DIF .)
    REAL            reduce using rule 86 (ExpRelDo -> DIF .)


state 165

    (47) ContPrintf -> ID RE ID RD PD . PV

    PV              shift and go to state 170


state 166

    (46) ContPrintf -> ID RE NUM RD PD . PV

    PV              shift and go to state 171


state 167

    (50) RestoScanf -> ENDID RE NUM RD PD . PV

    PV              shift and go to state 172


state 168

    (51) RestoScanf -> ENDID RE ID RD PD . PV

    PV              shift and go to state 173


state 169

    (79) CondDo -> PE Conta ExpRelDo Conta . PD

    PD              shift and go to state 174


state 170

    (47) ContPrintf -> ID RE ID RD PD PV .

    ID              reduce using rule 47 (ContPrintf -> ID RE ID RD PD PV .)
    PRINT           reduce using rule 47 (ContPrintf -> ID RE ID RD PD PV .)
    SCAN            reduce using rule 47 (ContPrintf -> ID RE ID RD PD PV .)
    IF              reduce using rule 47 (ContPrintf -> ID RE ID RD PD PV .)
    DO              reduce using rule 47 (ContPrintf -> ID RE ID RD PD PV .)
    $end            reduce using rule 47 (ContPrintf -> ID RE ID RD PD PV .)
    CD              reduce using rule 47 (ContPrintf -> ID RE ID RD PD PV .)


state 171

    (46) ContPrintf -> ID RE NUM RD PD PV .

    ID              reduce using rule 46 (ContPrintf -> ID RE NUM RD PD PV .)
    PRINT           reduce using rule 46 (ContPrintf -> ID RE NUM RD PD PV .)
    SCAN            reduce using rule 46 (ContPrintf -> ID RE NUM RD PD PV .)
    IF              reduce using rule 46 (ContPrintf -> ID RE NUM RD PD PV .)
    DO              reduce using rule 46 (ContPrintf -> ID RE NUM RD PD PV .)
    $end            reduce using rule 46 (ContPrintf -> ID RE NUM RD PD PV .)
    CD              reduce using rule 46 (ContPrintf -> ID RE NUM RD PD PV .)


state 172

    (50) RestoScanf -> ENDID RE NUM RD PD PV .

    ID              reduce using rule 50 (RestoScanf -> ENDID RE NUM RD PD PV .)
    PRINT           reduce using rule 50 (RestoScanf -> ENDID RE NUM RD PD PV .)
    SCAN            reduce using rule 50 (RestoScanf -> ENDID RE NUM RD PD PV .)
    IF              reduce using rule 50 (RestoScanf -> ENDID RE NUM RD PD PV .)
    DO              reduce using rule 50 (RestoScanf -> ENDID RE NUM RD PD PV .)
    $end            reduce using rule 50 (RestoScanf -> ENDID RE NUM RD PD PV .)
    CD              reduce using rule 50 (RestoScanf -> ENDID RE NUM RD PD PV .)


state 173

    (51) RestoScanf -> ENDID RE ID RD PD PV .

    ID              reduce using rule 51 (RestoScanf -> ENDID RE ID RD PD PV .)
    PRINT           reduce using rule 51 (RestoScanf -> ENDID RE ID RD PD PV .)
    SCAN            reduce using rule 51 (RestoScanf -> ENDID RE ID RD PD PV .)
    IF              reduce using rule 51 (RestoScanf -> ENDID RE ID RD PD PV .)
    DO              reduce using rule 51 (RestoScanf -> ENDID RE ID RD PD PV .)
    $end            reduce using rule 51 (RestoScanf -> ENDID RE ID RD PD PV .)
    CD              reduce using rule 51 (RestoScanf -> ENDID RE ID RD PD PV .)


state 174

    (79) CondDo -> PE Conta ExpRelDo Conta PD .

    PV              reduce using rule 79 (CondDo -> PE Conta ExpRelDo Conta PD .)

